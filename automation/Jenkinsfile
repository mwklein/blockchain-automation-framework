/* Pipeline to deploy DLT Platforms supported by BAF on a demo environment
// In summary, this pipeline does the following
//  1. Depending on the branch, merges the latest code from develop to the specific branches
//  2. Builds and tests apps, binaries, chaincodes, smartcontracts
//  3. Tests ansible roles
//  4. Prepare deployment environment files
//  5. Depending on the branch, deploys DLT network
//  6. Depending on the branch, deploys Supply-chain application on DLT network
//  7. Depending on the branch, tests Supply-chain APIs.
*/
pipeline {
  agent any
  
  options {
    buildDiscarder(logRotator(numToKeepStr: '10', daysToKeepStr: '15'))
    // either use this with polling method, or use webhooks to trigger builds
    disableConcurrentBuilds()
  }
    
  environment {
      //Define common variables
      //GIT repo links
      GITOPS_REPO="github.com/hyperledger-labs/blockchain-automation-framework.git"
      //SSH version is also needed
      GITOPS_SSH="ssh://git@github.com:hyperledger-labs/blockchain-automation-framework.git"
      //Release path for Fabric
      REL_PATH="platforms/hyperledger-fabric/releases/dev"
      //Path for charts that will be deployed
      CHART_PATH="platforms/hyperledger-fabric/charts"
      
      //Store root directory
      ROOT_DIR="${pwd()}"
      //Docker registry address
      DOCKER_REGISTRY = "adopblockchaincloud0502.azurecr.io"		    
      //username for docker registry 
      DOCKER_USERNAME = 'ADOPBlockchainCloud0502'
      //password for docker registry taken from Jenkins credentials
      DOCKER_PASSWORD = credentials('azure_container_password')

      //KUBECONFIG file to connect to the single cluster. This file is replace when pipeline runs
      // by the choice you make in the build/input parameters
      KUBECONFIG="${pwd()}/build/kubeconfig.yaml"
      CRED="jenkins"
      //Service User credentials from Jenkins used to check-in to git
      GIT_CREDS="sownak-innerource"
      //GOPATH for build chaincode
      GOPATH="${pwd()}/go"

  }


  stages {
    // Merge latest changes from develop branch 
    stage('Merge develop branch') {
      when {
        not {
          anyOf {
            branch 'master';
            branch 'develop' 
          }
        }
      }
      steps {
        sh 'printenv'
        withCredentials([
            usernamePassword(credentialsId: "${GIT_CREDS}", 
            usernameVariable: 'USERNAME', 
            passwordVariable: 'PASSWORD'
        )]) {
          script {
              //encode the username and password
              env.encodedGitName=URLEncoder.encode(USERNAME, "UTF-8")
              env.encodedGitPass=URLEncoder.encode(PASSWORD, "UTF-8")
          }
          sh """
            git config --global user.email "baf@accenture.com"
            git config --global user.name ${USERNAME}
            git config --global user.password ${PASSWORD}
            git config --global push.default matching
            git merge origin/develop
          """
        }
      }
    }
    stage('Build and Test Fabric Chaincode') {
      when {
        branch 'fabric' 
      }
      steps {
        script{
          def root = tool name: 'Go 1.13', type: 'go'

          dir('examples/supplychain-app/fabric/chaincode_rest_server/'){
            withEnv(["GOROOT=${root}", "PATH+GO=${root}/bin", "INSTALL_DIRECTORY=${root}/bin"]) {
              sh 'go version'
              sh """
                apt-get update
                apt-get install build-essential -y
                curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
              """
              sh """
                echo 'copying chaincode folder'
                mkdir -p ${GOPATH}/src/github.com/ && cp -r chaincode ${GOPATH}/src/github.com/
                cd ${GOPATH}/src/github.com/chaincode
                dep ensure
              """
            }
          }
            
          dir('examples/supplychain-app/fabric/chaincode_rest_server/'){
            withEnv(["GOROOT=${root}", "PATH+GO=${root}/bin"]) {
              sh 'go version'
              sh """
                  echo 'run go test' 
                  go test github.com/chaincode/supplychain
              """
            }
          }
        }
      }
    }
    stage('Test Ansible Roles') {
      agent {
        docker { // create an agent from the molecule docker image
          image 'hyperledgerlabs/baf-build:jenkins'
          args '-v /var/run/docker.sock:/var/run/docker.sock'
          label 'docker-xlarge'
        }
      }
      steps {
        dir('platforms/shared/configuration/') {
            sh """
              molecule test
            """
        }
      }
    }

    stage('Prepare build environment') {
      //env.BRANCH_NAME
      steps {
        withCredentials([kubeconfigContent(credentialsId: 'aws_demo', 
          variable: 'KUBECONFIG_CONTENT')]) {
          sh '''echo "$KUBECONFIG_CONTENT" > ${KUBECONFIG} && cat ${KUBECONFIG}'''
        }
        withCredentials([file(credentialsId: '${CRED}', variable: 'FILE')]) {
          sh 'cat $FILE'
        }      
      }
    }

  /*
    *  Create the Fabric configuration file
    */
      stage('Create Fabric Configuration') {
          steps {
              //WithCredentials to get the username and password for GIT user
              withCredentials([
                    usernamePassword(credentialsId: "${GIT_CREDS}", 
                    usernameVariable: 'USERNAME', 
                    passwordVariable: 'PASSWORD'
              )]) {
                  script {
                      //encode the username and password
                      env.encodedGitName=URLEncoder.encode(USERNAME, "UTF-8")
                      env.encodedGitPass=URLEncoder.encode(PASSWORD, "UTF-8")
                  }
                  // Replace the sample fabric network.yaml and fill in required parameters
                  dir('platforms/hyperledger-fabric/configuration/') {
                      sh """
                          cp samples/network-fabricv2.yaml network.yaml
                          sed -i -e 's*docker_url*${DOCKER_REGISTRY}*g' network.yaml
                          sed -i -e 's*docker_username*${DOCKER_USERNAME}*g' network.yaml
                          sed -i -e 's*docker_password*${DOCKER_PASSWORD}*g' network.yaml
                          sed -i -e 's*vault_addr*${params.VAULT_ADDR}*g' network.yaml
                          sed -i -e 's*vault_root_token*${params.VAULT_TOKEN}*g' network.yaml                            
                          sed -i -e 's*gitops_ssh_url*${GITOPS_SSH}*g' network.yaml                            
                          sed -i -e 's*gitops_branch*${params.RELEASE_BRANCH}*g' network.yaml
                          sed -i -e 's*gitops_release_dir*${REL_PATH}*g' network.yaml
                          sed -i -e 's*gitops_charts*${CHART_PATH}*g' network.yaml
                          sed -i -e 's*gitops_push_url*${GITOPS_REPO}*g' network.yaml
                          sed -i -e 's*git_username*${USERNAME}*g' network.yaml
                          sed -i -e 's+git_password+${PASSWORD}+g' network.yaml
                          sed -i -e 's*cluster_region*${params.REGION}*g' network.yaml
                          sed -i -e 's*cluster_context*${params.CLUSTER_CONTEXT}*g' network.yaml
                          sed -i -e 's*cluster_config*${KUBECONFIG}*g' network.yaml
                      """
                  }
              }
          }
      }
      stage('Add AWS Details to Configuration') {
          steps {
              //WithCredentials to get the username and password for AWS Account
              //TODO: Use when statement when multiple cloud provider is available
              withCredentials([[
                  $class: 'AmazonWebServicesCredentialsBinding',
                  credentialsId: 'terraform_user',
                  accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                  secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
              ]]) {
                  // Add AWS specific parameters
                  dir('platforms/hyperledger-fabric/configuration/') {
                      sh """
                          sed -i -e 's+aws_access_key+${AWS_ACCESS_KEY_ID}+g' network.yaml
                          sed -i -e 's+aws_secret_key+${AWS_SECRET_ACCESS_KEY}+g' network.yaml                           
                      """
                  }
              }
          }
      }
      /*
    *  If RESET_ACTION is yes, delete the network
        *  NOTE: The Flux installation is also deleted
    */
      stage('Reset existing network') {
          when {
              expression {
                  params.RESET_ACTION.toLowerCase() == 'yes'
              }
          }
          steps {
                dir('platforms/hyperledger-fabric/configuration/') {
                  echo 'Run ansible playbook'
                  sh 'ansible-playbook reset-network.yaml -e "@./network.yaml"'
              }
          }    
      }
      /*
    *  Execute site.yaml which will setup environment and deploy the network
    */
      stage('Deploy Fabric Network and create channel') {
          steps {
              dir('platforms/hyperledger-fabric/configuration/') {
                  sh """
                      ansible-playbook ../../shared/configuration/site.yaml -e "@./network.yaml"
                  """
              }
          }
      }
  }
}